<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #>
<#@ output extension=".cs" #>
<#@ include file="./Config/DBSchema.ttinclude"#>
<#
    var dbSchema=DBSchemaFactory.GetDBSchema();
    List<string> tableList=dbSchema.GetTablesList();
	var tableName ="sys_form_tmpl_opportunity";
    Table table=dbSchema.GetTableMetadata(tableName);
#>
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;

namespace EMT.DoneNOW.Core
{
	[Table("<#=tableName#>")]
    [Serializable]
	[DataContract]
    public partial class <#=tableName#> <# if(table.Columns.Exists(x=>x.ColumnName=="delete_time")){ #>: SoftDeleteCore <# } #>

    {

<#		
        foreach(Column c in table.Columns)
        {
#>
<#			
			if(table.PKs.Exists(x=>x.ColumnName==c.ColumnName))
            {
#>
		[Key]
<#
            }
			if(!(c.ColumnName=="delete_time" || c.ColumnName=="create_time" || c.ColumnName=="update_time"
			|| c.ColumnName=="update_user_id" || c.ColumnName=="delete_user_id" || c.ColumnName=="create_user_id"))
			{
#>
	    [DataMember]
        public <#=GeneratorHelper.GetPropertyType(c)#> <#=c.LowerColumnName#>{ get;set;}
<#
        }}
#>

       
    }
}
/*

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using EMT.DoneNOW.Core;
namespace EMT.DoneNOW.DAL
{
    public class <#=tableName#>_dal : BaseDAL<<#=tableName#>>
    {
		/// <summary>
        /// 比较两个对象的属性，记录不同的属性及属性值
        /// </summary>
        /// <param name="oldObj"></param>
        /// <param name="newObj"></param>
        /// <returns></returns>
		public string UpdateDetail(<#=tableName#> oldObj, <#=tableName#> newObj)
		{
			if (oldObj == null || newObj == null)
                return null;
			List<ObjUpdateDto> list = new List<ObjUpdateDto>();
<#		
			foreach(Column c in table.Columns)
			{
			if(!(c.ColumnName=="delete_time" || c.ColumnName=="create_time" || c.ColumnName=="update_time"
			|| c.ColumnName=="update_user_id" || c.ColumnName=="delete_user_id" || c.ColumnName=="create_user_id"))
			{
#>
			if (!Object.Equals(oldObj.<#=c.ColumnName#>, newObj.<#=c.ColumnName#>))
				list.Add(new ObjUpdateDto { field = "<#=c.ColumnName#>", old_val = oldObj.<#=c.ColumnName#>, new_val = newObj.<#=c.ColumnName#> });
<#
			}}
#>
			if (list.Count == 0)
                return "";
            return new Tools.Serialize().SerializeJson(list);
		}
    }

}

*/
<#
    dbSchema.Dispose();
#>